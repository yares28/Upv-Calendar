services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: upv-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: upvcal
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Node.js Backend API Service (NOT the Java Spring Boot backend)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: upv-backend-nodejs
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=upvcal
      - PORT=3000
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Angular App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: upv-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
    restart: unless-stopped

volumes:
  postgres-data: 